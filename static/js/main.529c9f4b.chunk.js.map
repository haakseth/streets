{"version":3,"sources":["Map/components/Street.js","Map/hooks/useMedia.js","Map/components/Panel.js","Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["Street","props","street","hovered","setHoveredStreet","onStreetClick","ref","useRef","useEffect","setTimeout","scrollIntoView","current","scrollMode","behavior","block","react_default","a","createElement","Wrapper","onMouseEnter","key","onClick","styled","div","_templateObject","css","_templateObject2","useMedia","queries","values","defaultValue","match","useCallback","query","findIndex","q","matchMedia","matches","_useState","useState","_useState2","Object","slicedToArray","value","set","handler","window","addEventListener","removeEventListener","Panel","streets","hoveredStreet","toggled","isSmallScreen","style","boxSizing","position","right","bottom","top","height","left","backgroundColor","zIndex","width","display","flexDirection","boxShadow","overflowY","padding","opacity","animation","useSpring","transform","web","_objectSpread","map","Map","mapContainer","undefined","setMap","_useState3","_useState4","setStreets","_useState5","_useState6","infoStyle","length","borderRadius","alignItems","justifyContent","fontWeight","getMapStreets","features","queryRenderedFeatures","layers","keys","Set","primaryRoads","f","properties","name","filter","has","add","sort","b","on","e","point","getCanvas","cursor","_ref","mapboxgl","accessToken","mapboxMap","container","center","zoom","maxZoom","addLayer","id","source","source-layer","type","paint","line-color","line-width","addControl","NavigationControl","showCompass","initializeMap","setFilter","overflow","el","coordinates","geometry","bounds","reduce","coord","extend","LngLatBounds","fitBounds","error","App","className","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.529c9f4b.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport scrollIntoView from 'smooth-scroll-into-view-if-needed';\n\nexport default function Street(props) {\n  const { street, hovered, setHoveredStreet, onStreetClick } = props;\n  const ref = useRef(null);\n  useEffect(() => {\n    if (hovered) {\n      setTimeout(() => {\n        scrollIntoView(ref.current, {\n          scrollMode: 'if-needed',\n          behavior: 'auto',\n          block: 'nearest'\n        });\n      }, 100);\n    }\n  }, [hovered]);\n  return (\n    <Wrapper\n      ref={ref}\n      hovered={hovered}\n      onMouseEnter={() => setHoveredStreet(street)}\n      key={street}\n      onClick={() => onStreetClick(street)}\n      street={street}\n    >\n      {street}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  cursor: pointer;\n  padding: 4px 12px;\n  border-radius: 3px;\n  font-weight: 600;\n  background-color: hsl(210, 36%, 96%);\n  color: #000;\n  transition: 0.3s;\n  margin: 2px 0;\n  box-shadow: 4px 0 12px 0 #ed649800;\n  ${props =>\n    props.hovered &&\n    css`\n      background-color: #ed6498;\n      color: white;\n      box-shadow: 0 2px 6px 0 #ed649880;\n    `}\n`;\n","import { useState, useEffect, useCallback } from 'react';\n\nexport function useMedia(queries, values, defaultValue) {\n  // State update function\n  const match = useCallback(() => {\n    // Get first media query that matches\n    const query = queries.findIndex(q => matchMedia(q).matches);\n    // Return related value or defaultValue if none\n    return values[query] || defaultValue;\n  }, [defaultValue, queries, values]);\n\n  // State and setter for current value\n  const [value, set] = useState(match);\n\n  useEffect(() => {\n    // Update state on window resize\n    // Usage of match function defined outside of useEffect ...\n    // ... ensures that it has current values of arguments.\n    const handler = () => set(match);\n    window.addEventListener('resize', handler);\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handler);\n  }, [match]); // Empty array ensures effect is only run on mount and unmount\n\n  return value;\n}\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport Street from './Street';\nimport { useMedia } from '../hooks/useMedia';\n\nexport default function Panel(props) {\n  const {\n    streets,\n    hoveredStreet,\n    setHoveredStreet,\n    onStreetClick,\n    toggled\n  } = props;\n  const isSmallScreen = useMedia([`(max-width: 600px)`], [true], false);\n  const style = {\n    boxSizing: 'border-box',\n    position: 'fixed',\n    right: 0,\n    bottom: 0,\n    top: isSmallScreen ? 'unset' : 0,\n    height: isSmallScreen ? '40vh' : 'unset',\n    left: isSmallScreen ? 0 : 'unset',\n    backgroundColor: 'hsl(210, 36%, 96%)',\n    zIndex: 3,\n    width: isSmallScreen ? '100vw' : 230,\n    display: 'flex',\n    flexDirection: 'column',\n    boxShadow: '0 4px 12px 0 rgba(16, 42, 67, 0.2)',\n    overflowY: 'auto',\n    padding: '1em 0.5em',\n    opacity: 0.9\n  };\n  const animation = useSpring({\n    transform: toggled\n      ? 'translate3d(0%, 0%, 0)'\n      : isSmallScreen\n      ? 'translate3d(0%, 100%, 0)'\n      : 'translate3d(100%, 0%, 0)'\n  });\n  return (\n    <animated.div style={{ ...style, ...animation }} toggled={toggled}>\n      {streets.map(street => {\n        return (\n          <Street\n            hovered={hoveredStreet === street}\n            setHoveredStreet={() => setHoveredStreet(street)}\n            key={street}\n            onStreetClick={() => onStreetClick(street)}\n            street={street}\n          />\n        );\n      })}\n    </animated.div>\n  );\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl, { NavigationControl } from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Panel from \"./components/Panel\";\nimport { useMedia } from \"./hooks/useMedia\";\nimport { useSpring, animated } from \"react-spring\";\n\nexport default function Map() {\n  const mapContainer = useRef();\n  const [map, setMap] = useState(undefined);\n  const [streets, setStreets] = useState([]);\n  const [hoveredStreet, setHoveredStreet] = useState(\"\");\n\n  const infoStyle = useSpring({\n    position: \"absolute\",\n    bottom: streets.length ? -60 : 40,\n    left: 40,\n    width: 250,\n    height: 30,\n    zIndex: 3,\n    backgroundColor: \"hsl(210, 36%, 96%)\",\n    boxShadow: \"0 4px 12px 0 rgba(16, 42, 67, 0.2)\",\n    padding: \"1em 0.5em\",\n    opacity: 0.9,\n    borderRadius: 3,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    fontWeight: 600\n  });\n  const isSmallScreen = useMedia([`(max-width: 600px)`], [true], false);\n  const getMapStreets = () => {\n    const features = map.queryRenderedFeatures({\n      layers: [\"road\"]\n    });\n    const keys = new Set();\n    const primaryRoads = features\n      .map(f => f.properties.name)\n      .filter(street => {\n        if (!street || keys.has(street)) {\n          return false;\n        }\n        keys.add(street);\n        return true;\n      })\n      .sort((a, b) => {\n        if (a > b) return 1;\n        return -1;\n      });\n\n    setStreets(primaryRoads);\n  };\n  useEffect(() => {\n    if (map) {\n      getMapStreets();\n      map.on(\"mousemove\", e => {\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: [\"road\"]\n        });\n        if (features.length) {\n          map.getCanvas().style.cursor = \"pointer\";\n          setHoveredStreet(features[0].properties.name);\n        } else {\n          map.getCanvas().style.cursor = \"\";\n        }\n      });\n      map.on(\"moveend\", getMapStreets);\n    }\n    // eslint-disable-next-line\n  }, [map]);\n\n  useEffect(() => {\n    const initializeMap = ({ setMap, mapContainer }) => {\n      mapboxgl.accessToken =\n        \"pk.eyJ1IjoiaGFha3NldGgiLCJhIjoiY2l5NGg2Y3ljMDAxaTJ5bHF5aXF0NHRuciJ9.aVkFfSGQhUYb9bmf4JtkTg\";\n      const mapboxMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/haakseth/ck2kw48j83sjy1cpohx5kqxou\",\n        center: [12.57, 55.67],\n        zoom: 12.5,\n        maxZoom: 16\n      });\n\n      mapboxMap.on(\"load\", () => {\n        mapboxMap.addLayer(\n          {\n            id: \"hovered-street\",\n            source: \"composite\",\n            \"source-layer\": \"road\",\n            type: \"line\",\n            paint: {\n              \"line-color\": \"#ed6498\",\n              \"line-width\": [\n                \"interpolate\",\n                [\"exponential\", 2],\n                [\"zoom\"],\n                5,\n                0.5,\n                12,\n                3,\n                18,\n                30\n              ]\n            },\n            filter: [\"==\", \"name\", \"\"]\n          },\n          \"road-label\"\n        );\n        mapboxMap.addControl(\n          new NavigationControl({ showCompass: false }),\n          \"top-left\"\n        );\n        setMap(mapboxMap);\n      });\n    };\n    if (!map) initializeMap({ setMap, mapContainer });\n    /*eslint-disable-next-line */\n  }, [map]);\n\n  useEffect(() => {\n    if (map) {\n      map.setFilter(\"hovered-street\", [\n        \"==\",\n        \"name\",\n        hoveredStreet ? hoveredStreet : \"\"\n      ]);\n    }\n    // eslint-disable-next-line\n  }, [hoveredStreet]);\n  const onStreetClick = street => {\n    const features = map\n      .queryRenderedFeatures({\n        layers: [\"road\"]\n      })\n      .filter(f => {\n        return f.properties.name === street;\n      });\n    if (features.length) {\n      //https://docs.mapbox.com/mapbox-gl-js/example/zoomto-linestring/\n      try {\n        var coordinates = features[0].geometry.coordinates;\n        // Pass the first coordinates in the LineString to `lngLatBounds` &\n        // wrap each coordinate pair in `extend` to include them in the bounds\n        // result. A variation of this technique could be applied to zooming\n        // to the bounds of multiple Points or Polygon geomteries - it just\n        // requires wrapping all the coordinates with the extend method.\n        var bounds = coordinates.reduce(function(bounds, coord) {\n          return bounds.extend(coord);\n        }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\n\n        map.fitBounds(bounds, {\n          padding: isSmallScreen\n            ? 0\n            : { top: 200, bottom: 200, right: 430, left: 200 }\n        });\n      } catch (error) {\n        // console.log(error);\n      }\n    }\n  };\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        zIndex: 1,\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        overflow: \"none\"\n      }}\n      ref={el => (mapContainer.current = el)}\n    >\n      <Panel\n        toggled={streets.length}\n        streets={streets}\n        hoveredStreet={hoveredStreet}\n        setHoveredStreet={setHoveredStreet}\n        onStreetClick={onStreetClick}\n      />\n      <animated.div style={infoStyle}>\n        Zoom ind til gadenivå for udforske\n      </animated.div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Map from './Map/Map';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}